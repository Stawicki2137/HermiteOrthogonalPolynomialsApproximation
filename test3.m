function test3()
% Mateusz Stawicki, 333274
%
% Funkcja testująca poprawność implementacji P1Z56_MST_HermitApprox

fprintf("-----------------------------------Test3----------------" + ...
    "-------------------\n")
fprintf("Sprawdzanie poprawności implementacji funkcji P1Z56_MST_He" + ...
    "rmitApprox, która\n" + ...
    "wyznacza współczynniki aproksymacji. Test polega na porównaniu " + ...
    "wyznaczanych\n" + ...
    "przez testowaną funkcję współczynników z współczynnikami wyznac" + ...
    "zonymi\n" + ...
    "analitycznie dla kilku funkcji, oblicza błąd bezwględny, któreg" + ...
    "o niewielkie\nwartości " + ...
    "oznaczają poprawną implementację. Wektory współczynników są w\nb" + ...
    "azie " + ...
    "g_0,g_1,..,g_N gdzie g_i oznacza wielomian ortonormalny Hermite" + ...
    "'a\nstopnia i," + ...
    "a N oznacza największy stopień wielomianu w bazie.\n");
% Współczynniki wyznaczone analitycznie, kolejno stojące przy g_0,
% g_1,...,g_N gdzie g_i to wielomian ortonormalny Hermite'a stopnia i-tego
ftotest = {
    @(x) 1, [ sqrt(sqrt(pi))],'f(x) = 1';
    @(x) x.^2, [ sqrt(sqrt(pi)) / 2; 0; sqrt(sqrt(pi)) / sqrt(2)], ... 
    'f(x) = x^2';
    @(x) x.^3, [ 0; 3 * sqrt(sqrt(pi)) / (2*sqrt(2)); 0; sqrt(3) / 2 ...
    * sqrt(sqrt(pi))],'f(x) = x^3';
    @(x) cos(x), [ sqrt(sqrt(pi / exp(1))); 0; -sqrt(sqrt(pi / ...
    exp(1))) / (2 * sqrt(2)); 0; sqrt(sqrt(pi / exp(1)))/(8 * ...
    sqrt(6)); 0],'f(x) = cos(x)';
    @(x) 5 * x^5 - 7 * x^3, [ 0; 33 * sqrt(sqrt(pi)) / (4 * ...
    sqrt(2)); 0; 9 * sqrt(3) * sqrt(sqrt(pi)); 0; 5 / 2 * sqrt(15) ...
    * sqrt(sqrt(pi))],'f(x) = 5 * x^5 - 7 *x^3';
    };

% Testowanie
for i = 1:size(ftotest, 1)
    f = ftotest{i, 1};         % Funkcja testowa
    a_coef = ftotest{i, 2}; % Współczynniki wyznaczone analitycznie
    f_name = ftotest{i,3}; % Nazwa funkcji w formacie gotowym do ładnego
    % wyświetlenia

    N = length(a_coef) - 1;  % Stopień wielomianu
    t_coeffs = P1Z56_MST_HermitApprox(f, N); % wyznaczenie współczynników
    % aproksymacyjnych za pomocą funkcji, która jest testowana pod
    % względem poprawności implementacji

    err = abs(t_coeffs - a_coef); % Obliczenie błędu

    % Wyświetlenie wyników
    fprintf(['-----------------------------------------------' ...
        '----------------------------\n']);
    fprintf('Funkcja wykorzystana do testów: %s\n', f_name);
    fprintf('Oczekiwane współczynniki: %s\n', mat2str(a_coef, 3));
    fprintf('Wyznaczone współczynniki: %s\n', mat2str(t_coeffs, 3));
    fprintf('Błąd bezwględny:          %s\n', mat2str(err, 2));
    if i == 2
        fprintf("[Press any key] "); pause(); fprintf("\n");
    end
end

end % function
